import os
import json
from google import genai as gen
from dotenv import load_dotenv 


load_dotenv()
api_key = os.getenv("GEMINI_API_KEY")
client = gen.Client(api_key=api_key)
print("API Key Loaded:", api_key is not None)

def load_memory(file_path):
    if os.path.exists(file_path):
        with open(file_path, "r") as f:
            data = json.load(f)
            print(f"Memory loaded from {file_path}.")
            return data
    else:
        print(f"Memory file {file_path} not found. Returning empty memory.")
        return []
def save_memory(file_path, data):
    with open(file_path, "w") as f:
        json.dump(data, f, indent=2)


def store_message(user_input, ai_response, category="chat"):
    global memory,memory2
    if category == "fact":
        memory.append({"user": user_input, "ai": ai_response})
        save_memory("facts.json", memory)
    else:
        max_memory = 10
        if len(memory2) > max_memory:
            memory2 = memory2[-max_memory:]
        memory2.append({"user": user_input, "ai": ai_response})
        save_memory("chats.json", memory2)

def build_context():
    context = ""
    for fact in memory:
        context += f"- {fact.get('user')} (\nAI: {fact.get('ai')})\n"
    context += ""
    for chat in memory2:
        context += f"User: {chat.get('user')}\nAI: {chat.get('ai')}\n"
    return context


def ask(contents):
    try:
        context = build_context()
        context += f"\nUser: {contents}\n"
        response = client.models.generate_content(
            model="gemini-2.5-flash",
            contents=context
        )
        reply= response.text.strip()
        if contents.lower() in  ["exit","bye","quit"]:
            print("Exiting the program.")
            exit()

        if contents.lower() in ["forget last message", "clear memory", "forget"]:
            memory2.pop()
            save_memory("chats.json", memory2)
            return "Last memory is cleared."
        if contents.lower() in ["clear all memory", "forget all"]:
            memory2.clear()
            save_memory("chats.json", memory2)
            return "All memory is cleared."
        if contents.lower().startswith("my") or "i am" in contents.lower() or "remember" in contents.lower():
            store_message(contents, reply, category="fact")
        else:
            store_message(contents, reply, category="chat")
        return response.text

    except Exception as e:
        print("Error occurred while generating content:", e)
        return "Sorry, I couldn't generate a response."



memory = load_memory("facts.json")
memory2 = load_memory("chats.json")


# print(len(memory), "memory items loaded.")
while True:
    user_input = input("You: ")
    reply = ask(user_input)
    print("AI:", reply)

